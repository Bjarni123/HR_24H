#!/usr/bin/env node
import { execa } from 'execa';
import { fileURLToPath } from 'url';
import { platform, arch } from 'os';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
async function getExePath() {
  const platform$1 = platform();
  const arch$1 = arch();
  let os = platform$1;
  let extension = "";
  if (platform$1 === "win32" || platform$1 === "cygwin") {
    os = "windows";
    extension = ".exe";
  }
  try {
    return import.meta.resolve(
      `rust-just-${os}-${arch$1}/bin/just${extension}`
    );
  } catch (e) {
    throw new Error(
      `Couldn't find just binary inside node_modules for ${os}-${arch$1} (${e})`
    );
  }
}
__name(getExePath, "getExePath");

// src/index.ts
async function run() {
  const exePath = await getExePath();
  const args = process.argv.slice(2);
  const processResult = await execa(fileURLToPath(exePath), args, {
    stdio: "inherit"
  });
  process.exit(processResult.exitCode ?? 0);
}
__name(run, "run");
void run();
